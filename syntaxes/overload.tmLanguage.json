{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Overload",
    "scopeName": "source.overload",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#expressions"
        }
    ],
    "repository": {
        "comments": {
            "name": "comments",
            "patterns": [
                {
                    "name": "comment.line.double-slash.overload",
                    "match": "//.*"
                }
            ]
        },
        "expressions": {
            "patterns": [
                {
                    "include": "#literals"
                },
                {
                    "include": "#bindings"
                },
                {
                    "include": "#keywords"
                }
            ]
        },
        "literals": {
            "patterns": [
                {
                    "include": "#strings"
                },
                {
                    "include": "#numbers"
                },
                {
                    "include": "#booleans"
                }
            ]
        },
        "strings": {
            "name": "string.quoted.single.overload",
            "begin": "'",
            "end": "'",
            "patterns": [
                {
                    "name": "constant.character.escape.overload",
                    "match": "\\\\."
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.overload",
                    "match": "\\b(?<!\\.)([1-9]\\d*)(%|(px|s)?\\b)(?!\\.)"
                },
                {
                    "name": "constant.numeric.overload",
                    "match": "\\b(([1-9]\\d*|0)\\.\\d+)(%|(px|s)?\\b)"
                },
                {
                    "name": "constant.other.color.rgb-value.hex.overload",
                    "match": "#([0-9a-fA-F]{8}|[0-9a-fA-F]{6})\\b"
                }
            ]
        },
        "booleans": {
            "patterns": [
                {
                    "name": "constant.language.boolean.overload",
                    "match": "(true|false)"
                }
            ]
        },
        "bindings": {
            "patterns": [
                {
                    "begin": "(?=\\s+let )",
                    "end": "(?<==)",
                    "match": "let +(_\\w+|[a-zA-Z]\\w*)(\\s+(?:(_\\w+|[a-zA-Z]\\w*)( *(:) +((_\\w+|[a-zA-Z]\\w*)\\??)))+)? *="
                },
                {
                    "begin": "(let|signal) +(_\\w+|[a-zA-Z]\\w*)( *(:) +((_\\w+|[a-zA-Z]\\w*)\\??))? *",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.other.overload"
                        },
                        "2": {
                            "name": "variable.name.overload"
                        },
                        "4": {
                            "name": "keyword.symbol.overload"
                        },
                        "5": {
                            "name": "entity.name.type"
                        }
                    },
                    "end": "=",
                    "endCaptures": {
                        "0": {
                            "name": "keyword.operator.assignment.overload"
                        }
                    }
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.other.overload",
                    "match": "(if|then|elif|else|let|signal)"
                },
                {
                    "name": "keyword.control.overload",
                    "match": "raise"
                },
                {
                    "name": "support.type.primitive.overload",
                    "match": "(bool|float|int|color)"
                }
            ]
        }
    }
}