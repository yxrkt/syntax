{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Overload",
    "scopeName": "source.overload",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#literals"
        },
        {
            "include": "#definitions"
        },
        {
            "include": "#ghetto"
        }
    ],
    "repository": {
        "comments": {
            "name": "comments",
            "patterns": [
                {
                    "name": "comment.line.double-slash.overload",
                    "match": "//.*"
                }
            ]
        },
        "definitions": {
            "patterns": [
                {
                    "include": "#value-binding"
                },
                {
                    "include": "#function-declaration"
                },
                {
                    "include": "#field-assignment"
                }
            ]
        },
        "literals": {
            "patterns": [
                {
                    "include": "#strings"
                },
                {
                    "include": "#numbers"
                },
                {
                    "include": "#booleans"
                },
                {
                    "include": "#tags"
                }
            ]
        },
        "ghetto": {
            "patterns": [
                {
                    "comment": "Function",
                    "match": "\\b(?:(_\\w+|[a-zA-Z]\\w*)\\.)*(_\\w+|[a-zA-Z]\\w*)\\(",
                    "captures": {
                        "1": {
                            "name": "entity.name.type.overload"
                        },
                        "2": {
                            "name": "entity.name.function.overload"
                        }
                    }
                },
                {
                    "comment": "Function",
                    "match": "\\|\\s*(?:(_\\w+|[a-zA-Z]\\w*)\\.)*(_\\w+|[a-zA-Z]\\w*)\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.type.overload"
                        },
                        "2": {
                            "name": "entity.name.function.overload"
                        }
                    }
                },
                {
                    "comment": "Type",
                    "match": "(?:: +|\\[)(_\\w+|[a-zA-Z]\\w*)(?:\\.(_\\w+|[a-zA-Z]\\w*))*\\b\\??",
                    "captures": {
                        "1": {
                            "name": "entity.name.type.overload"
                        },
                        "2": {
                            "name": "entity.name.type.overload"
                        }
                    }
                },
                {
                    "comment": "Values and Accessors",
                    "begin": "(?<=\\s)(_\\w+|[a-zA-Z]\\w*)(?!\\()",
                    "beginCaptures": {
                        "1": {
                            "name": "variable.other.object.overload"
                        }
                    },
                    "end": "(?=[^\\w\\.])",
                    "patterns": [
                        {
                            "match": "(\\.)(_\\w+|[a-zA-Z]\\w*)",
                            "captures": {
                                "1": {
                                    "name": "punctuation.accessor.overload"
                                },
                                "2": {
                                    "name": "variable.other.object.property.overload"
                                }
                            }
                        }
                    ]
                }
            ]
        },
        "strings": {
            "name": "string.quoted.single.overload",
            "begin": "'",
            "end": "'",
            "patterns": [
                {
                    "name": "constant.character.escape.overload",
                    "match": "\\\\."
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.overload",
                    "match": "\\b(?<!\\.)(([1-9]\\d*|0))(%|(px|s)?\\b)(?!\\.)"
                },
                {
                    "name": "constant.numeric.overload",
                    "match": "\\b(([1-9]\\d*|0)\\.\\d+)(%|(px|s)?\\b)"
                },
                {
                    "name": "constant.other.color.rgb-value.hex.overload",
                    "match": "#([0-9a-fA-F]{8}|[0-9a-fA-F]{6})\\b"
                }
            ]
        },
        "booleans": {
            "patterns": [
                {
                    "name": "constant.language.boolean.overload",
                    "match": "(true|false)"
                }
            ]
        },
        "tags": {
            "patterns": [
                {
                    "name": "string.quoted.double.tag.overload",
                    "match": "@(_\\w+|[a-zA-Z]\\w*)"
                }
            ]
        },
        "value-binding": {
            "patterns": [
                {
                    "match": "^ *(let|signal) +(?:(public) +)?(_\\w+|[a-zA-Z]\\w*)(?: *(:) +((_\\w+|[a-zA-Z]\\w*)\\??))? *(=)",
                    "captures": {
                        "1": {
                            "name": "keyword.other.overload"
                        },
                        "2": {
                            "name": "storage.modifier.overload"
                        },
                        "3": {
                            "name": "variable.name.overload"
                        },
                        "4": {
                            "name": "keyword.operator.type.annotation.overload"
                        },
                        "5": {
                            "name": "entity.name.type"
                        },
                        "6": {
                            "name": "keyword.operator.assignment.overload"
                        }
                    }
                }
            ]
        },
        "function-declaration": {
            "name": "meta.function.overload",
            "begin": "^ *(?=let)",
            "end": "(?<=\\))",
            "patterns": [
                {
                    "name": "meta.function.keyword-and-name",
                    "match": "(let) +(?:(public) +)?(_\\w+|[a-zA-Z]\\w*)\\(",
                    "captures": {
                        "1": {
                            "name": "keyword.other.overload"
                        },
                        "2": {
                            "name": "storage.modifier.overload"
                        },
                        "3": {
                            "name": "entity.name.function.overload"
                        }
                    }
                },
                {
                    "name": "meta.function.parameter",
                    "begin": "\\s*",
                    "end": ",|\\)",
                    "match": "(_\\w+|[a-zA-Z]\\w*)(?: *(:) +(_\\w+|[a-zA-Z]\\w*))?",
                    "captures": {
                        "1": {
                            "name": "variable.parameter.overload"
                        },
                        "2": {
                            "name": "keyword.operator.type.annotation.overload"
                        },
                        "3": {
                            "name": "entity.name.type"
                        }
                    }
                }
            ]
        },
        "field-assignment": {
            "patterns": [
                {
                    "match": "(_\\w+|[a-zA-Z]\\w*)(?: *(:) +(_\\w+|[a-zA-Z]\\w*))? *(=)",
                    "captures": {
                        "1": {
                            "name": "entity.name.variable.field.overload"
                        },
                        "2": {
                            "name": "keyword.operator.type.annotation.overload"
                        },
                        "3": {
                            "name": "entity.name.type"
                        },
                        "4": {
                            "name": "keyword.operator.assignment.overload"
                        }
                    }
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.overload",
                    "match": "\\braise\\b"
                },
                {
                    "name": "keyword.other.overload",
                    "match": "\\b(if|then|elif|else|not|and|or|with)\\b"
                },
                {
                    "name": "support.type.primitive.overload",
                    "match": "\\b(bool|float|int|color)\\b"
                }
            ]
        }
    }
}