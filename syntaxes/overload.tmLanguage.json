{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Overload",
    "scopeName": "source.overload",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#expressions"
        },
        {
            "include": "#definitions"
        },
        {
            "name": "meta.scope-test.overload",
            "begin": "scope",
            "beginCaptures": {
                "0": {
                    "name": "keyword.other"
                }
            },
            "end": "\\g<0>",
            "endCaptures": {
                "0": {
                    "name": "keyword.other"
                }
            }
        }
    ],
    "repository": {
        "comments": {
            "name": "comments",
            "patterns": [
                {
                    "name": "comment.line.double-slash.overload",
                    "match": "//.*"
                }
            ]
        },
        "expressions": {
            "patterns": [
                {
                    "include": "#literals"
                }
            ]
        },
        "definitions": {
            "patterns": [
                {
                    "include": "#value-binding"
                },
                {
                    "include": "#function-declaration"
                }
            ]
        },
        "literals": {
            "patterns": [
                {
                    "include": "#strings"
                },
                {
                    "include": "#numbers"
                },
                {
                    "include": "#booleans"
                }
            ]
        },
        "strings": {
            "name": "string.quoted.single.overload",
            "begin": "'",
            "end": "'",
            "patterns": [
                {
                    "name": "constant.character.escape.overload",
                    "match": "\\\\."
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.overload",
                    "match": "\\b(?<!\\.)([1-9]\\d*)(%|(px|s)?\\b)(?!\\.)"
                },
                {
                    "name": "constant.numeric.overload",
                    "match": "\\b(([1-9]\\d*|0)\\.\\d+)(%|(px|s)?\\b)"
                },
                {
                    "name": "constant.other.color.rgb-value.hex.overload",
                    "match": "#([0-9a-fA-F]{8}|[0-9a-fA-F]{6})\\b"
                }
            ]
        },
        "booleans": {
            "patterns": [
                {
                    "name": "constant.language.boolean.overload",
                    "match": "(true|false)"
                }
            ]
        },
        "value-binding": {
            "patterns": [
                {
                    "match": "^ *(let|signal) +(_\\w+|[a-zA-Z]\\w*)(?: *(:) +((_\\w+|[a-zA-Z]\\w*)\\??))? *(=)",
                    "captures": {
                        "1": {
                            "name": "keyword.other.overload"
                        },
                        "2": {
                            "name": "variable.name.overload"
                        },
                        "3": {
                            "name": "keyword.operator.type.annotation.overload"
                        },
                        "4": {
                            "name": "entity.name.type"
                        },
                        "5": {
                            "name": "keyword.operator.assignment.overload"
                        }
                    }
                }
            ]
        },
        "function-declaration": {
            "name": "meta.function.overload",
            "begin": "(^ *)(?=let +)",
            "end": "(?<=@)",
            "patterns": [
                {
                    "name": "meta.function.signature.overload",
                    "begin": "(?=let)",
                    "end": "(?<==)",
                    "patterns": [
                        {
                            "name": "keyword.control.overload",
                            "match": "@"
                        },
                        {
                            "name": "meta.function.keyword-and-name",
                            "match": "(let) +(_\\w+|[a-zA-Z]\\w*)\\s+",
                            "captures": {
                                "1": {
                                    "name": "keyword.other.overload"
                                },
                                "2": {
                                    "name": "entity.name.function.overload"
                                }
                            }
                        },
                        {
                            "name": "meta.function.parameter",
                            "begin": "\\s*",
                            "end": "(;|\\n|=)",
                            "match": "(_\\w+|[a-zA-Z]\\w*)(?: *(:) +(_\\w+|[a-zA-Z]\\w*))?",
                            "captures": {
                                "1": {
                                    "name": "variable.parameter.overload"
                                },
                                "2": {
                                    "name": "keyword.operator.type.annotation.overload"
                                },
                                "3": {
                                    "name": "entity.name.type"
                                }
                            }
                        }
                    ]
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.overload",
                    "match": "raise"
                },
                {
                    "name": "support.type.primitive.overload",
                    "match": "(bool|float|int|color)"
                }
            ]
        }
    }
}